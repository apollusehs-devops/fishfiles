#!/usr/bin/env bash
time_ago() {
  # unix format timestamp
  timestamp="$1"
  now="$(date '+%s')"

  diff="$((now - timestamp))"

  if [[ "$diff" -lt 60 ]]; then
    echo "just now"
  elif [[ "$diff" -lt 3600 ]]; then
    mins="$((diff / 60))"
    echo "${mins}m"
  elif [[ "$diff" -lt 86400 ]]; then
    hours="$((diff / 3600))"
    echo "${hours}h"
  elif [[ "$diff" -lt 1209600 ]]; then
    days="$((diff / 86400))"
    echo "${days}d"
  else
    weeks="$((diff / 604800))"
    echo "${weeks}w"
  fi
}

list_branches() {
  # eg, 'master develop etc'
  branches="$1"

  echo ""
  for branch in $branches; do
    # UNIX timestamp
    timestamp="$(git log -1 --pretty='%ct' $branch)"
    ago="$(time_ago "$timestamp")"
    printf "  %-50s %8s\n" "$branch" "$ago"
  done
  echo ""
}

remote="origin"
master="master"
skip_fetch=1

# Fetch first
if [[ "$skip_fetch" != 1 ]]; then
  git fetch
fi

# Find the branches to be cleaned up
remote_branches="$(git branch --no-color -r --merged $remote/$master | grep -v "\*" | grep -v -e $master)"
local_branches="$(git branch --no-color --merged $master | grep -v "\*" | grep -v -e $master)"

if [[ -n "$remote_branches" ]]; then
  echo "These remote branches have been merged into $remote/$master:"
  list_branches "$remote_branches"
fi

if [[ -n "$local_branches" ]]; then
  echo "These local branches have been merged into $master:"
  list_branches "$local_branches"
fi

if [[ -n "$remote_branches" ]] && [[ -n "$local_branches" ]]; then
  echo -n "Delete?  [a]ll  [l]ocal-only  [r]emote-only  [n]o: "
  read result
elif [[ -n "$remote_branches" ]] || [[ -n "$local_branches" ]]; then
  echo ""
  echo -n "Delete?  [a]ll  [n]o: "
  read result
else
  echo "Nothing to do. Spiffy clean!"
  exit 0
fi

echo ""

if [[ -n "$local_branches" ]]; then
  if [[ "$result" == "l" ]] || [[ "$result" == "a" ]]; then
    # Delete local branches
    echo "$local_branches" | xargs -n 1 git branch -d
    echo "Local branches deleted."
  fi
fi

if [[ -n "$remote_branches" ]]; then
  if [[ "$result" == "r" ]] || [[ "$result" == "a" ]]; then
    # Delete remote  branches
    for branch in $remote_branches; do
      # $branch is 'origin/aoeu', $branch_name is 'aoeu'
      branch_name="$(echo $branch | sed "s#$remote/##")"
      git branch -d -r "$branch"
      git push $remote ":$branch_name"
    done
    echo "Remote branches deleted."
  fi
fi
